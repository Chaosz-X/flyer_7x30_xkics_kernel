From d7509b8e94cd36197e5855955f269b48dcbeddde Mon Sep 17 00:00:00 2001
From: Jordan Crouse <jcrouse@codeaurora.org>
Date: Tue, 27 Dec 2011 11:39:01 +0100
Subject: [PATCH] msm: kgsl: Export global symbols

Export any global core symbols that might be used by device modules.

Change-Id: I2b831a2f2df90e7d9057b7f6999c988164949413
Signed-off-by: Jordan Crouse <jcrouse@codeaurora.org>
---
 drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl.c     |   39 ++++++++++++++------
 drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl.h     |    8 +---
 .../msm/gpu/kgsl_adreno205_hc/kgsl_sharedmem.c     |   11 ++++++
 .../msm/gpu/kgsl_adreno205_hc/kgsl_sharedmem.h     |    2 -
 .../video/msm/gpu/kgsl_adreno205_hc/kgsl_yamato.c  |    4 +-
 5 files changed, 42 insertions(+), 22 deletions(-)

diff --git a/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl.c b/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl.c
index 9dfb4e5..ef03add 100644
--- a/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl.c
+++ b/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl.c
@@ -152,6 +152,7 @@ static int kgsl_add_event(struct kgsl_device *device, u32 ts,
 
 	kfree(entry);
 }
+EXPORT_SYMBOL(kgsl_mem_entry_destroy);
 
 static
 void kgsl_mem_entry_attach_process(struct kgsl_mem_entry *entry,
@@ -166,7 +167,7 @@ void kgsl_mem_entry_attach_process(struct kgsl_mem_entry *entry,
 
 /* Allocate a new context id */
 
-struct kgsl_context *
+static struct kgsl_context *
 kgsl_create_context(struct kgsl_device_private *dev_priv)
 {
 	struct kgsl_context *context;
@@ -202,7 +203,7 @@ struct kgsl_context *
 	return context;
 }
 
-void
+static void
 kgsl_destroy_context(struct kgsl_device_private *dev_priv,
 		     struct kgsl_context *context)
 {
@@ -337,8 +338,9 @@ struct kgsl_device *kgsl_get_device(int dev_idx)
 	mutex_unlock(&kgsl_driver.devlock);
 	return ret;
 }
+EXPORT_SYMBOL(kgsl_get_device);
 
-struct kgsl_device *kgsl_get_minor(int minor)
+static struct kgsl_device *kgsl_get_minor(int minor)
 {
 	struct kgsl_device *ret = NULL;
 
@@ -359,6 +361,7 @@ int kgsl_register_ts_notifier(struct kgsl_device *device,
 	return atomic_notifier_chain_register(&device->ts_notifier_list,
 					      nb);
 }
+EXPORT_SYMBOL(kgsl_register_ts_notifier);
 
 int kgsl_unregister_ts_notifier(struct kgsl_device *device,
 				struct notifier_block *nb)
@@ -367,6 +370,7 @@ int kgsl_unregister_ts_notifier(struct kgsl_device *device,
 	return atomic_notifier_chain_unregister(&device->ts_notifier_list,
 						nb);
 }
+EXPORT_SYMBOL(kgsl_unregister_ts_notifier);
 
 int kgsl_check_timestamp(struct kgsl_device *device, unsigned int timestamp)
 {
@@ -378,6 +382,7 @@ int kgsl_check_timestamp(struct kgsl_device *device, unsigned int timestamp)
 
 	return timestamp_cmp(ts_processed, timestamp);
 }
+EXPORT_SYMBOL(kgsl_check_timestamp);
 
 int kgsl_setstate(struct kgsl_device *device, uint32_t flags)
 {
@@ -390,6 +395,7 @@ int kgsl_setstate(struct kgsl_device *device, uint32_t flags)
 
 	return status;
 }
+EXPORT_SYMBOL(kgsl_setstate);
 
 int kgsl_idle(struct kgsl_device *device, unsigned int timeout)
 {
@@ -400,7 +406,7 @@ int kgsl_idle(struct kgsl_device *device, unsigned int timeout)
 
 	return status;
 }
-
+EXPORT_SYMBOL(kgsl_idle);
 
 int kgsl_setup_pt(struct kgsl_pagetable *pt)
 {
@@ -437,7 +443,7 @@ int kgsl_cleanup_pt(struct kgsl_pagetable *pt)
 	return 0;
 }
 
-int kgsl_suspend_device(struct kgsl_device *device, pm_message_t state)
+static int kgsl_suspend_device(struct kgsl_device *device, pm_message_t state)
 {
 	int status = -EINVAL;
 	unsigned int nap_allowed_saved;
@@ -491,7 +497,7 @@ int kgsl_suspend_device(struct kgsl_device *device, pm_message_t state)
 	return status;
 }
 
-int kgsl_resume_device(struct kgsl_device *device)
+static int kgsl_resume_device(struct kgsl_device *device)
 {
 	int status = -EINVAL;
 
@@ -526,7 +532,7 @@ int kgsl_resume_device(struct kgsl_device *device)
 	return status;
 }
 
-int kgsl_suspend(struct device *dev)
+static int kgsl_suspend(struct device *dev)
 {
 
 	pm_message_t arg = {0};
@@ -534,18 +540,18 @@ int kgsl_suspend(struct device *dev)
 	return kgsl_suspend_device(device, arg);
 }
 
-int kgsl_resume(struct device *dev)
+static int kgsl_resume(struct device *dev)
 {
 	struct kgsl_device *device = dev_get_drvdata(dev);
 	return kgsl_resume_device(device);
 }
 
-int kgsl_runtime_suspend(struct device *dev)
+static int kgsl_runtime_suspend(struct device *dev)
 {
 	return 0;
 }
 
-int kgsl_runtime_resume(struct device *dev)
+static int kgsl_runtime_resume(struct device *dev)
 {
 	return 0;
 }
@@ -556,6 +562,7 @@ int kgsl_runtime_resume(struct device *dev)
 	.runtime_suspend = kgsl_runtime_suspend,
 	.runtime_resume = kgsl_runtime_resume,
 };
+EXPORT_SYMBOL(kgsl_pm_ops);
 
 int kgsl_suspend_driver(struct platform_device *pdev,
 					pm_message_t state)
@@ -563,12 +570,14 @@ int kgsl_suspend_driver(struct platform_device *pdev,
 	struct kgsl_device *device = dev_get_drvdata(&pdev->dev);
 	return kgsl_suspend_device(device, state);
 }
+EXPORT_SYMBOL(kgsl_suspend_driver);
 
 int kgsl_resume_driver(struct platform_device *pdev)
 {
 	struct kgsl_device *device = dev_get_drvdata(&pdev->dev);
 	return kgsl_resume_device(device);
 }
+EXPORT_SYMBOL(kgsl_resume_driver);
 
 /* file operations */
 static struct kgsl_process_private *
@@ -846,6 +855,7 @@ struct kgsl_mem_entry *
 
 	return result;
 }
+EXPORT_SYMBOL(kgsl_gpuaddr_to_vaddr);
 
 uint8_t *kgsl_gpuaddr_to_vaddr(const struct kgsl_memdesc *memdesc,
 	unsigned int gpuaddr, unsigned int *size)
@@ -2078,6 +2088,7 @@ struct kgsl_driver kgsl_driver  = {
 	.pt_mutex = __MUTEX_INITIALIZER(kgsl_driver.pt_mutex),
 	.devlock = __MUTEX_INITIALIZER(kgsl_driver.devlock),
 };
+EXPORT_SYMBOL(kgsl_driver);
 
 void kgsl_unregister_device(struct kgsl_device *device)
 {
@@ -2105,6 +2116,7 @@ void kgsl_unregister_device(struct kgsl_device *device)
 
 	atomic_dec(&kgsl_driver.device_count);
 }
+EXPORT_SYMBOL(kgsl_unregister_device);
 
 int
 kgsl_register_device(struct kgsl_device *device)
@@ -2169,8 +2181,9 @@ void kgsl_unregister_device(struct kgsl_device *device)
 
 	return ret;
 }
+EXPORT_SYMBOL(kgsl_register_device);
 
-int kgsl_device_probe(struct kgsl_device *device,
+int kgsl_device_platform_probe(struct kgsl_device *device,
 			irqreturn_t (*dev_isr) (int, void*))
 {
 	int status = -EINVAL;
@@ -2289,8 +2302,9 @@ int kgsl_device_probe(struct kgsl_device *device,
 error:
 	return status;
 }
+EXPORT_SYMBOL(kgsl_device_platform_probe);
 
-void kgsl_device_remove(struct kgsl_device *device)
+void kgsl_device_platform_remove(struct kgsl_device *device)
 {
 	struct kgsl_memregion *regspace = &device->regspace;
 
@@ -2320,6 +2334,7 @@ void kgsl_device_remove(struct kgsl_device *device)
 	wake_lock_destroy(&device->idle_wakelock);
 	idr_destroy(&device->context_idr);
 }
+EXPORT_SYMBOL(kgsl_device_platform_remove);
 
 static int __devinit
 kgsl_ptdata_init(void)
diff --git a/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl.h b/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl.h
index cbc64a7..536d0d9 100644
--- a/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl.h
+++ b/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl.h
@@ -210,14 +210,10 @@ int kgsl_register_ts_notifier(struct kgsl_device *device,
 int kgsl_unregister_ts_notifier(struct kgsl_device *device,
 				struct notifier_block *nb);
 
-int kgsl_device_probe(struct kgsl_device *device,
+int kgsl_device_platform_probe(struct kgsl_device *device,
 		irqreturn_t (*dev_isr) (int, void*));
-void kgsl_device_remove(struct kgsl_device *device);
+void kgsl_device_platform_remove(struct kgsl_device *device);
 
-int kgsl_suspend(struct device *dev);
-int kgsl_resume(struct device *dev);
-int kgsl_runtime_suspend(struct device *dev);
-int kgsl_runtime_resume(struct device *dev);
 extern const struct dev_pm_ops kgsl_pm_ops;
 
 int kgsl_suspend_driver(struct platform_device *pdev, pm_message_t state);
diff --git a/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_sharedmem.c b/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_sharedmem.c
index 95610eb..55d9d53 100644
--- a/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_sharedmem.c
+++ b/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_sharedmem.c
@@ -442,6 +442,7 @@ struct kgsl_memdesc_ops kgsl_vmalloc_ops = {
 	.outer_cache = kgsl_vmalloc_outer_cache,
 #endif
 };
+EXPORT_SYMBOL(kgsl_vmalloc_ops);
 
 static struct kgsl_memdesc_ops kgsl_coherent_ops = {
 	.physaddr = kgsl_contig_physaddr,
@@ -458,6 +459,7 @@ struct kgsl_memdesc_ops kgsl_contig_ops = {
 	.outer_cache = kgsl_contig_outer_cache
 #endif
 };
+EXPORT_SYMBOL(kgsl_contig_ops);
 
 /* Global - also used by kgsl.c */
 struct kgsl_memdesc_ops kgsl_userptr_ops = {
@@ -466,6 +468,7 @@ struct kgsl_memdesc_ops kgsl_userptr_ops = {
 	.outer_cache = kgsl_userptr_outer_cache,
 #endif
 };
+EXPORT_SYMBOL(kgsl_userptr_ops);
 
 void kgsl_cache_range_op(struct kgsl_memdesc *memdesc, int op)
 {
@@ -487,6 +490,7 @@ void kgsl_cache_range_op(struct kgsl_memdesc *memdesc, int op)
 	if (memdesc->ops->outer_cache)
 		memdesc->ops->outer_cache(memdesc, op);
 }
+EXPORT_SYMBOL(kgsl_cache_range_op);
 
 static int
 _kgsl_sharedmem_vmalloc(struct kgsl_memdesc *memdesc,
@@ -541,6 +545,7 @@ void kgsl_cache_range_op(struct kgsl_memdesc *memdesc, int op)
 	return _kgsl_sharedmem_vmalloc(memdesc, pagetable, ptr, size,
 		GSL_PT_PAGE_RV | GSL_PT_PAGE_WV);
 }
+EXPORT_SYMBOL(kgsl_sharedmem_vmalloc);
 
 int
 kgsl_sharedmem_vmalloc_user(struct kgsl_memdesc *memdesc,
@@ -566,6 +571,7 @@ void kgsl_cache_range_op(struct kgsl_memdesc *memdesc, int op)
 	return _kgsl_sharedmem_vmalloc(memdesc, pagetable, ptr, size,
 		protflags);
 }
+EXPORT_SYMBOL(kgsl_sharedmem_vmalloc_user);
 
 int
 kgsl_sharedmem_alloc_coherent(struct kgsl_memdesc *memdesc, size_t size)
@@ -589,6 +595,7 @@ void kgsl_cache_range_op(struct kgsl_memdesc *memdesc, int op)
 
 	return 0;
 }
+EXPORT_SYMBOL(kgsl_sharedmem_alloc_coherent);
 
 void kgsl_sharedmem_free(struct kgsl_memdesc *memdesc)
 {
@@ -603,6 +610,7 @@ void kgsl_sharedmem_free(struct kgsl_memdesc *memdesc)
 
 	memset(memdesc, 0, sizeof(*memdesc));
 }
+EXPORT_SYMBOL(kgsl_sharedmem_free);
 
 int
 kgsl_sharedmem_readl(const struct kgsl_memdesc *memdesc,
@@ -618,6 +626,7 @@ void kgsl_sharedmem_free(struct kgsl_memdesc *memdesc)
 	*dst = readl(memdesc->hostptr + offsetbytes);
 	return 0;
 }
+EXPORT_SYMBOL(kgsl_sharedmem_readl);
 
 int
 kgsl_sharedmem_writel(const struct kgsl_memdesc *memdesc,
@@ -632,6 +641,7 @@ void kgsl_sharedmem_free(struct kgsl_memdesc *memdesc)
 	writel(src, memdesc->hostptr + offsetbytes);
 	return 0;
 }
+EXPORT_SYMBOL(kgsl_sharedmem_writel);
 
 int
 kgsl_sharedmem_set(const struct kgsl_memdesc *memdesc, unsigned int offsetbytes,
@@ -645,3 +655,4 @@ void kgsl_sharedmem_free(struct kgsl_memdesc *memdesc)
 	memset(memdesc->hostptr + offsetbytes, value, sizebytes);
 	return 0;
 }
+EXPORT_SYMBOL(kgsl_sharedmem_set);
diff --git a/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_sharedmem.h b/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_sharedmem.h
index 0a47194..45a7c21 100644
--- a/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_sharedmem.h
+++ b/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_sharedmem.h
@@ -81,8 +81,6 @@ int kgsl_sharedmem_vmalloc_user(struct kgsl_memdesc *memdesc,
 
 void kgsl_sharedmem_free(struct kgsl_memdesc *memdesc);
 
-uint kgsl_get_physaddr(const struct kgsl_memdesc *memdesc);
-
 int kgsl_sharedmem_readl(const struct kgsl_memdesc *memdesc,
 			uint32_t *dst,
 			unsigned int offsetbytes);
diff --git a/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_yamato.c b/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_yamato.c
index ba0cef5..8c740b2 100644
--- a/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_yamato.c
+++ b/drivers/video/msm/gpu/kgsl_adreno205_hc/kgsl_yamato.c
@@ -497,7 +497,7 @@ static int kgsl_yamato_setstate(struct kgsl_device *device, uint32_t flags)
 	if (status != 0)
 		goto error;
 
-	status = kgsl_device_probe(device, kgsl_yamato_isr);
+	status = kgsl_device_platform_probe(device, kgsl_yamato_isr);
 	if (status)
 		goto error_close_rb;
 
@@ -522,7 +522,7 @@ static int __devexit kgsl_3d_remove(struct platform_device *pdev)
 	device = (struct kgsl_device *)pdev->id_entry->driver_data;
 	device_3d = KGSL_YAMATO_DEVICE(device);
 
-	kgsl_device_remove(device);
+	kgsl_device_platform_remove(device);
 
 	kgsl_ringbuffer_close(&device_3d->ringbuffer);
 
-- 
1.7.5.4

